#!/bin/sh
VERSION="2018.09.08-14:38"
SRC_URL="https://raw.githubusercontent.com/javier-lopez/learn/master/sh/tools/"

PROGNAME="$(basename "${0}")"
DOCKER_WALLET_LABEL="ubuntu-${PROGNAME}-common"
TMPDIR="/tmp/dockerized-${PROGNAME}-${$}"
SECS="10"

DEFAULT="$(printf "\\033[0;39m")"
WHITE_BOLD="$(printf "\\033[1m")"
WHITE_BG="$(printf "\\033[7m")"
RED="$(printf "\\033[0;31m")"
GREEN="$(printf "\\033[0;32m")"
LIGHT_GREEN="$(printf "\\033[1;32m")"
YELLOW="$(printf "\\033[0;33m")"
HG="${LIGHT_GREEN}"

_usage() {
    printf "%s\\n" "Usage: ${PROGNAME} ARCHIVE"
    printf "%s\\n" "Dockerized [BTC|LTC|BTCP|NEO|ETH|XRP|ADA] thin clients."
    printf "\\n"
    printf "%s\\n" "Options:"
    printf "\\n"
    printf "%b\\n" "  -U, --update    update this program to latest version"
    printf "%s\\n" "  -V, --version   display version"
    printf "%b\\n" "  -h, --help      show this message and exit"
    printf "\\n"
    printf "%s\\n" "Examples:"
    printf "\\n"
    printf "%s\\n" "  $ ${PROGNAME} Electrum-3.2.2.tar.gz            #BTC"
    printf "%s\\n" "  $ ${PROGNAME} Electrum-LTC-3.1.3.1.tar.gz      #LTC"
    printf "%s\\n" "  $ ${PROGNAME} Electrum-BTCP-1.1.1.tar.gz       #BTCP"
    printf "%s\\n" "  $ ${PROGNAME} Neon-0.2.6-x86_64.Linux.AppImage #NEO"
    printf "%s\\n" "  $ ${PROGNAME} etherwallet-v3.21.03.zip         #ETH"
    printf "%s\\n" "  $ ${PROGNAME} minimalist-ripple-client.html    #XRP"
    printf "%s\\n" "  $ ${PROGNAME} daedalus-0.11.0-cardano.exe      #ADA"
}

_die() {
    [ -z "${1}" ] || printf "%s\\n" "${*}" >&2
    _usage; >&2; exit 1
}

_update() {
    _u__current_file="$(cd "$(dirname "${0}")" && pwd)/${PROGNAME}"
    _u__current_version_long="$(awk -F\" \
        '/VERSION=/{print $2;exit}' "${_u__current_file}" 2>/dev/null)"
    _u__current_version="$(printf "%s\\n" "${_u__current_version_long}" | \
        awk '{gsub(/[\.:]/,"");gsub(/-/,"");print;exit}' 2>/dev/null)"
    [ -z "${_u__current_version}" ] && printf "%s\\n%s\\n%s\\n"           \
        "ERROR: Failed to detect current version, please update manually" \
        "${PROGNAME}         = ${_u__current_file}"                       \
        "${PROGNAME} version = ${_u__current_version}" >&2 && return 1

    command -v "wget" >/dev/null 2>&1 || command -v "curl" >/dev/null 2>&1 || \
        { printf "%s\\n" "ERROR: Install either 'wget' or 'curl' to upgrade" >&2; return 1; }

    _u__url="${SRC_URL}/${PROGNAME}"
    _u__tmpfile="/tmp/${PROGNAME}.${$}.update"

    _u__error_msg="$(wget -q -O- --no-check-certificate "${_u__url}" \
        > "${_u__tmpfile}" 2>&1   || curl -s -L "${_u__url}"  \
        > "${_u__tmpfile}" 2>&1)" || { printf "%s\\n%s\\n" \
        "ERROR: Failed to fetch update, please try later or update manually" \
        "${_u__error_msg}" >&2; return 1; }

    _u__update_version_long="$(awk -F\" \
        '/VERSION=/{print $2;exit}' "${_u__tmpfile}" 2>/dev/null)"
    _u__update_version="$(printf "%s\\n" "${_u__update_version_long}" | awk \
        '{gsub(/[\.:]/,"");gsub(/-/,"");print;exit}' 2>/dev/null)"
    [ -n "${_u__update_version}" ] || _u__update_version="0"

    if [ "${_u__current_version}" -lt "${_u__update_version}" ]; then
        printf "%s %s\\n" "Updating from version" \
            "${_u__current_version_long} to ${_u__update_version_long} ..."
        chmod +x "${_u__tmpfile}"
        if ! mv -f "${_u__tmpfile}" "${_u__current_file}" 2>/dev/null; then
            printf "%s\\n" "ERROR: no write permissions on ${_u__current_file}" >&2
            printf "%s\\n" "INFO : trying with sudo ..." >&2
            if command -v "sudo" >/dev/null 2>&1; then
                sudo mv "${_u__tmpfile}" "${_u__current_file}" || return 1
            else
                printf "%s\\n" "ERROR: sudo isn't available, exiting ..." >&2
                rm -rf "${_u__tmpfile}"
                return 1
            fi
        fi
        printf "%s %s\\n" "${PROGNAME} is up-to-date (${_u__update_version_long})"
        return 0
    fi
    printf "%s %s\\n" "${PROGNAME} is up-to-date (${_u__current_version_long})"
    rm -rf "${_u__tmpfile}"
}

_show_version() {
    printf "%s\\n" "${PROGNAME} ${VERSION}"
}

_unprintf() {
    [ -z "${1}" ] && return 1
    printf "\\r"
    for i in $(seq 0 "${#1}"); do printf " "  ; done
    printf "\\r"
}

_printf_sleep() {
    [ -z "${2}" ] && return 1
    _ps__string="${1} "
    _ps__secs="${2}"

    while [ "${_ps__secs}" -gt "0" ]; do
        _unprintf "${_ps__string}"
        printf "%s\\n" "${_ps__string}" | sed "s:X:${_ps__secs}:g" | tr -d '\n'
        sleep 1 || {
            _unprintf "${_ps__string}"
            return 1
        }
        _ps__secs="$((_ps__secs - 1))"
    done
    _unprintf "${_ps__string}"
}

_build_common_docker_image() {
    mkdir -p "${TMPDIR}"
    cat <<EOF > "${TMPDIR}/Dockerfile"
FROM ubuntu:16.04
#Electrum deps
RUN apt-get update && \
    apt-get -y install python3-pyqt5 python3-pip libssl-dev && \
    apt-get clean
RUN pip3 install scrypt
#BTCP deps
RUN pip3 install pyblake2
#Neo deps
RUN apt-get update && \
    apt-get -y install libfuse2 libgtk2.0-0 libnss3-dev libasound2 libdbus-glib-1-2 && \
    apt-get clean
#Browser for eth|xrp html based wallets
RUN apt-get install -y --no-install-recommends wget && \
    wget -q -c https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
    apt-get install -y --no-install-recommends gdebi-core && \
    gdebi -o APT::Install-Recommends=0 -o APT::Install-Suggests=0 --non-interactive google-chrome-stable_current_amd64.deb && \
    rm -rf google-chrome-stable_current_amd64.deb && \
    apt-get clean
EOF

    docker build --label "${DOCKER_WALLET_LABEL}" --tag "${DOCKER_WALLET_LABEL}" "${TMPDIR}"
}

_verify_and_wait() {
    [ -s "${archive}" ] || _die "Archive is empty: ${archive}"

    case "${archive}" in
                *Electrum-*.tar.gz) wallet="electrum"    ;;
                           *Neon-*) wallet="neo"         ;;
                    *etherwallet-*) wallet="etherwallet" ;;
        *minimalist-ripple-client*) wallet="xrp"         ;;
            *daedalus*cardano*.exe) wallet="ada"         ;;
        *) _die "Invalid archive: ${archive}" ;;
    esac

    printf "%s\\n" "Verify the archive before continuing!!!"
    printf "%s\\n"

    sha256="$(sha256sum "${archive}"|awk '{print $1}')"

    sha256_first_3_chars="$(printf "%s\\n" "${sha256}" | grep -o "^...")"
    sha256_first_3_chars="${HG}${sha256_first_3_chars}${DEFAULT}"
    sha256_last_3_chars="$(printf "%s\\n"  "${sha256}" | grep -o "...$")"
    sha256_last_3_chars="${HG}${sha256_last_3_chars}${DEFAULT}"

    sha256="$(printf "%s\\n" "${sha256}"|sed "s:^...:${sha256_first_3_chars}:g")"
    sha256="$(printf "%s\\n" "${sha256}"|sed "s:...$:${sha256_last_3_chars}:g")"

    printf "%b\\n" "${WHITE_BOLD}SHA256${DEFAULT}: ${sha256}"

    sha512="$(sha512sum "${archive}"|awk '{print $1}')"

    sha512_first_3_chars="$(printf "%s\\n" "${sha512}" | grep -o "^...")"
    sha512_first_3_chars="${HG}${sha512_first_3_chars}${DEFAULT}"
    sha512_last_3_chars="$(printf "%s\\n"  "${sha512}" | grep -o "...$")"
    sha512_last_3_chars="${HG}${sha512_last_3_chars}${DEFAULT}"

    sha512="$(printf "%s\\n" "${sha512}"|sed "s:^...:${sha512_first_3_chars}:g")"
    sha512="$(printf "%s\\n" "${sha512}"|sed "s:...$:${sha512_last_3_chars}:g")"

    printf "%b\\n" "${WHITE_BOLD}SHA512${DEFAULT}: ${sha512}"
    printf "%s\\n"
    _printf_sleep "Waiting X seconds.., press Ctrl-C to cancel" "${SECS}"
}

_cleanup() {
    sudo rm -rf "${TMPDIR}"
}

_electrum() {
    case "${archive}" in
         *Electrum-LTC-*.tar.gz) flavor="-ltc" ;;
        #https://github.com/javier-lopez/dockers/blob/master/electrum-btcp/build-linux-tar-from-docker.sh
        *Electrum-BTCP-*.tar.gz) flavor="-btcp" ;;
        *Electrum-*.tar.gz) : ;;
        *) _die "Invalid archive: ${archive}" ;;
    esac

    wallet_dir="$(basename "${archive}" .tar.gz)"

    cp "${archive}" "${TMPDIR}"

    (cd "${TMPDIR}"; tar zxf $(basename "${archive}"))

    xhost +
    docker run --rm -it                  \
        -v "${TMPDIR}/${wallet_dir}:/${wallet_dir}" \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY          \
        "${DOCKER_WALLET_LABEL}"         \
        /bin/bash -c "/${wallet_dir}/electrum${flavor}"
}

_neo() {
    cp "${archive}" "${TMPDIR}"
    wallet="$(basename "${archive}")"

    xhost +
    docker run --rm -it                               \
               -v "${TMPDIR}/${wallet}:/${wallet}"    \
               --cap-add SYS_ADMIN --device /dev/fuse \
               -v /tmp/.X11-unix:/tmp/.X11-unix \
               -e DISPLAY=unix$DISPLAY          \
               "${DOCKER_WALLET_LABEL}"         \
               /bin/bash -c "/${wallet}"
}

_etherwallet() {
    wallet_dir="$(basename "${archive}" .zip)"

    cp "${archive}" "${TMPDIR}"

    (cd "${TMPDIR}"; unzip $(basename "${archive}"))

    xhost +
    docker run --rm -it                  \
        -v "${TMPDIR}/${wallet_dir}:/${wallet_dir}" \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY          \
        "${DOCKER_WALLET_LABEL}"         \
        /bin/bash -c "google-chrome --no-sandbox --incognito /${wallet_dir}/index.html"
}

_xrp() {
    wallet="$(basename "${archive}")"

    cp "${archive}" "${TMPDIR}"

    xhost +
    docker run --rm -it                  \
        -v "${TMPDIR}/${wallet}:/${wallet}" \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY          \
        "${DOCKER_WALLET_LABEL}"         \
        /bin/bash -c "google-chrome --no-sandbox --incognito /${wallet}"
}

_ada() {
    wallet="$(basename "${archive}")"

    cp "${archive}" "${TMPDIR}"

    cat <<EOF > "${TMPDIR}/Vagrantfile"
Vagrant.configure("2") do |config|
  config.vm.box          = "jhakonen/windows-10-n-pro-en-x86_64"
  config.vm.guest        = :windows
  config.vm.communicator = "winrm"
  config.vm.provider "virtualbox" do |vbox|
    vbox.linked_clone = true
    vbox.gui          = true

    vbox.customize ["modifyvm", :id, "--memory", "2048" ] #MB
    vbox.customize ['modifyvm', :id, '--clipboard', 'bidirectional']
  end
  config.vm.provision "shell", inline: "\\\\\\\\VBOXSVR\\\\vagrant\\\\$(basename ${archive})"
end
EOF
    (
        cd "${TMPDIR}"
        vagrant up
        sleep 300m
        vagrant destroy -f
    )
}

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add it to the end of $@
    set -- "${@}" $(cat)
fi

[ "${#}" -eq "0" ] && _die

for arg in "${@}"; do #parse options
    case "${arg}" in
        -h|--help)    _usage;  exit ;;
        -U|--update)  _update; exit "${?}" ;;
        -V|--version) _show_version; exit "${?}" ;;
        -*) _die "${PROGNAME}: unrecognized option '${arg}'" ;;
    esac
done

archive="${1}"
_verify_and_wait "${archive}"

PS4="> "; set -xe; trap _cleanup INT QUIT #trap ctrl-c
_build_common_docker_image
_${wallet}

sudo rm -rf "${TMPDIR}"
