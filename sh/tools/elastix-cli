#!/bin/bash
#description: cli utility for elastix
#usage: elastix-cli [options] type args..

set -e #exit as soon as any command fail

DEFAULT_SSH_PASSWD="c2VjcmV0Cg=="
DEFAULT_MYSQL_PASSWD="c2VjcmV0Cg=="

_basename() {
    [ -z "${1}" ] && return 1 || _basename__name="${1}"
    [ -z "${2}" ] || _basename__suffix="${2}"
    case "${_basename__name}" in
        /*|*/*) _basename__name="$(expr "${_basename__name}" : '.*/\([^/]*\)')" ;;
    esac

    if [ -n "${_basename__suffix}" ] && [ "${#_basename__name}" -gt "${#2}" ]; then
        if [ X"$(printf "%s" "${_basename__name}" | cut -c"$((${#_basename__name} - ${#_basename__suffix} + 1))"-"${#_basename__name}")" \
           = X"$(printf "%s" "${_basename__suffix}")" ]; then
            _basename__name="$(printf "%s" "${_basename__name}" | cut -c1-"$((${#_basename__name} - ${#_basename__suffix}))")"
        fi
    fi

    printf "%s\\n" "${_basename__name}"
}

exec 9>/tmp/"$(_basename "${0}")".lock  #http://mywiki.wooledge.org/BashFAQ/045
[ X"${LOGNAME}" = X"root" ] && chmod 666 /tmp/"$(_basename "${0}")".lock
if ! flock -n 9 ; then
    printf "%s\\n" "$(_basename "${0}"): another instance is running"; >&2
    exit 1
fi

_usage() {
    printf "%s\\n" "Usage: $(_basename "${0}") [options] type args..."
    printf "%s\\n" "Control Elastix through a cli interface."
    printf "\\n"
    printf "%s\\n" "  -c         credentials, requires a FILE string as a parameter"
    printf "%s\\n" "  -h         host, user@hostname.domain:port (localhost and port 22 by default)"
    printf "%s\\n" "  -p         ssh password (secret by default)"
    printf "%s\\n" "  -m         mysql passwd (secret by default)"
    printf "%s\\n" "  --help     prints this message and exit"
    printf "\\n"
    printf "%s\\n" "  trunk      edit trunk options"
    printf "%s\\n" "    add      add a trunk, requires FILE string as parameter"
    printf "%s\\n" "    remove   removes a trunk on ip basis, requires IP|domain string"
    printf "%s\\n" "    edit     edit on ip basis, requires FILE string as parameter"
    printf "\\n"
    printf "%s\\n" "=examples="
    printf "\\n"
    printf "%s\\n" "#adds a new trunk in domain.com based on definition FILE[0]"
    printf "%s\\n" "  $(_basename "${0}") -h admin@domain.com trunk add definition"
    printf "\\n"
    printf "%s\\n" "#removes a trunk based on [IP|domain], uses credential FILE [1] to apply changes in several machines"
    printf "%s\\n" "  $(_basename "${0}") -r credentials trunk remove domain.com"
    printf "\\n"
    printf "%s\\n" "#edit the IP field of an existing trunk in localhost, uses <secret> as the mysql password for the root account"
    printf "%s\\n" "  $(_basename "${0}") -m secret trunk edit x.x.x.x y.y.y.y"
    printf "\\n"
    printf "%s\\n" "[0] http://www.voip-info.org/wiki/view/Asterisk+config+sip.conf"
    printf "%s\\n" "[1] remote access is defined as: user@remotehost:port,ssh_passwd,mysql_passwd, and can be defined as many lines as desired"
}

_die() {
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${*}" >&2
    printf "%s\\n" "See $(_basename "${0}") --help" >&2
    exit 1
}

_networkup() {
    #check for internet connection, returns 0 on success, 1 otherwise
    wget --tries=3 --timeout=5 http://www.google.com -O /tmp/index.google > /dev/null 2>&1

    if [ -s /tmp/index.google ]; then
        rm /tmp/index.google
        return 0
    else
        rm /tmp/index.google
        return 1
    fi
}

_isnum() { 
    #look for a number, returns 0 on success, 1 otherwise
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${@}" | grep -v "[^0-9]" >/dev/null
}

_haswhitespaces() {
    grep " " "${@}" >/dev/null 2>&1
}

_decode64() {
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${1}" | openssl enc -base64 -d
}

_isip4valid() {
    #return 0 if parameter is a valid ip4 address, non-zero otherwise
    #https://groups.google.com/forum/#!original/comp.unix.shell/NDu-kAL5cHs/7Zpc6Q2Hu5YJ
    [ -z "${1}" ] && return 1

    case "${*}" in
        ""|*[!0-9.]*|*[!0-9]) return 1 ;;
    esac

    OLDIFS="${IFS}"
    IFS="."
    set -- $@
    IFS="${OLDIFS}"

    [ "${#}" -eq "4" ] &&
        [ "${1:-666}" -le "255" ] && [ "${2:-666}" -le "255" ] &&
        [ "${3:-666}" -le "255" ] && [ "${4:-666}" -le "254" ]
}

_isdomainvalid() {  
    #return 0 if parameter is a valid domain address, non-zero otherwise
    printf "%s" "${@}" | grep -P '(?=^.{5,254}$)(^(?:(?!\d+\.)[a-zA-Z0-9_\-]{1,63}\.?)+(?:[a-zA-Z]{2,})$)' >/dev/null
}

_elastixfileformatisvalid() {
    #return 0 if parameter in file contain a valid format, non-zero otherwise
    elastix_format_trunk="$(grep "^trunk" "${1}" | cut -f2 -d"=")"
    elastix_format_host="$(grep "^host" "${1}"   | cut -f2 -d"=")"
    elastix_format_proxy="$(grep "^proxy" "${1}" | cut -f2 -d"=")"
    elastix_format_srvlookup="$(grep "^srvlookup" "${1}" | cut -f2 -d"=")"
    elastix_format_secret="$(grep "^secret" "${1}" | cut -f2 -d"=")"
    elastix_format_username="$(grep "^username" "${1}" | cut -f2 -d"=")"
    elastix_format_type="$(grep "^type" "${1}" | cut -f2 -d"=")"
    elastix_format_fromuser="$(grep "^fromuser" "${1}" | cut -f2 -d"=")"
    elastix_format_fromdomain="$(grep "^fromdomain" "${1}"   | cut -f2 -d"=")"
    elastix_format_canreinvite="$(grep "^canreinvite" "${1}" | cut -f2 -d"=")"
    elastix_format_qualify="$(grep "^qualify" "${1}" | cut -f2 -d"=")"
    elastix_format_nat="$(grep "^nat" "${1}" | cut -f2 -d"=")"
    elastix_format_insecure="$(grep "^insecure" "${1}" | cut -f2 -d"=")"
    elastix_format_dtmfmode="$(grep "^dtmfmode" "${1}" | cut -f2 -d"=")"
    elastix_format_disallow="$(grep "^disallow" "${1}" | cut -f2 -d"=")"
    elastix_format_allow="$(grep "^allow" "${1}" | cut -f2 -d"=")"
    elastix_format_context="$(grep "^context" "${1}"   | cut -f2 -d"=")"
    elastix_format_register="$(grep "^register" "${1}" | cut -f2 -d"=")"

    #commented settings can have null strings as parameters
    [ -z "${elastix_format_trunk}" ]       && _die "No valid [trunk] defined in ${1}"
    [ -z "${elastix_format_host}" ]        && _die "No valid [host] defined in ${1}"
    #[ -z "${elastix_format_proxy}" ]      && _die "No valid [proxy] defined in ${1}"
    [ -z "${elastix_format_srvlookup}" ]   && _die "No valid [srvlookup] defined in ${1}"
    [ -z "${elastix_format_secret}" ]      && _die "No valid [secret] defined in ${1}"
    [ -z "${elastix_format_username}" ]    && _die "No valid [username] defined in ${1}"
    [ -z "${elastix_format_type}" ]        && _die "No valid [type] defined in ${1}"
    [ -z "${elastix_format_fromuser}" ]    && _die "No valid [fromuser] defined in ${1}"
    [ -z "${elastix_format_fromdomain}" ]  && _die "No valid [fromdomain] defined in ${1}"
    [ -z "${elastix_format_canreinvite}" ] && _die "No valid [canreinvite] defined in ${1}"
    [ -z "${elastix_format_qualify}" ]     && _die "No valid [qualify] defined in ${1}"
    [ -z "${elastix_format_nat}" ]         && _die "No valid [nat] defined in ${1}"
    [ -z "${elastix_format_insecure}" ]    && _die "No valid [insecure] defined in ${1}"
    [ -z "${elastix_format_dtmfmode}" ]    && _die "No valid [dtmfmode] defined in ${1}"
    [ -z "${elastix_format_disallow}" ]    && _die "No valid [disallow] defined in ${1}"
    [ -z "${elastix_format_allow}" ]       && _die "No valid [allow] defined in ${1}"
    [ -z "${elastix_format_context}" ]     && _die "No valid [context] defined in ${1}"
    #[ -z "${elastix_format_register}" ]   && _die "No valid [register] defined in ${1}"
    return 0
}

_trunk() {
    [ -z "${2}" ] && _die "Missing param for: trunk ${1}"

    #do we have valid parameters?, preliminar tests
    if [ X"${1}" = X"add" ]; then
        [ -n "${3}" ] && _die "too many parameters for: trunk $*"
        [ ! -f "${2}" ] && _die "'${2}' doesn't exit"
        if ! _elastixfileformatisvalid "${2}"; then
            _die "'${2}' doesn't have a valid format"
        fi

        if ! _isip4valid "${elastix_format_host}"; then
            if ! _isdomainvalid "${elastix_format_host}"; then
                _die "'${elastix_format_host}' is not a valid host"
            fi
        fi

    elif [ X"${1}" = X"remove" ]; then
        [ -n "${3}" ] && _die "too many parameters for: trunk $*"
        if ! _isip4valid "${2}"; then
            if ! _isdomainvalid "${2}"; then
                _die "'${2}' is not a valid host"
            fi
        fi
    elif [ X"${1}" = X"edit" ]; then
        [ -n "${4}" ] && _die "too many parameters for: trunk $*"
        [ -z "${3}" ] && _die "too few parameters for: trunk $*"
        [ X"${2}" = X"${3}" ] && _die "parameters must be different: trunk $*"

        if ! _isip4valid "${2}"; then
            if ! _isdomainvalid "${2}"; then
                _die "'${2}' is not a valid host"
            fi
        fi

        if ! _isip4valid "${3}"; then
            if ! _isdomainvalid "${3}"; then
                _die "'${3}' is not a valid host"
            fi
        fi
    fi

    if [ -n "${elastix_credentials}" ]; then
        [ ! -f "${elastix_credentials}" ] && _die "'${elastix_credentials}' doesn't exist"

        #we're sending sensitive data to elastix instances, let's try to verify if our credentials are correct
        printf "%s\\n" "Verifying credentials defined in ${elastix_credentials} ..."
        if _haswhitespaces "${elastix_credentials}" ; then
            _die "'${elastix_credentials}' doesn't contain a valid format"
        fi

        #ssh modifies stdin behavior, therefore is better to pipe through other channel
        while IFS=',' read -r <&3 elastix_ssh_host elastix_ssh_passwd elastix_mysql_passwd JUNK; do
            [ -n "${JUNK}" ] && _die "${elastix_credentials} doesn't contain a valid format"

            if _isnum "$(printf "%s\\n" "${elastix_ssh_host}" | cut -f2 -d:)" ; then
                elastix_ssh_port="$(printf "%s\\n" "${elastix_ssh_host}" | cut -f2 -d:)"
            else
                elastix_ssh_port="22"
            fi
            elastix_ssh_host="$(printf "%s\\n" "${elastix_ssh_host}" | cut -f1 -d:)"

            [ -z "${elastix_ssh_passwd}" ] && elastix_ssh_passwd="$(_decode64 "${DEFAULT_SSH_PASSWD}")"
            [ -z "${elastix_mysql_passwd}" ] && elastix_mysql_passwd="$(_decode64 "${DEFAULT_MYSQL_PASSWD}")"

            if ! sshpass -p "${elastix_ssh_passwd}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port}" "${elastix_ssh_host}" "mysql -uroot -p${elastix_mysql_passwd} -e 'use asterisk'" ; then
                _die "${elastix_credentials}: invalid credentials for ${elastix_ssh_host}"
            fi
        done 3< "${elastix_credentials}"

        elastix_ssh_host_array=()
        elastix_ssh_port_array=()
        elastix_ssh_passwd_array=()
        elastix_mysql_passwd_array=()

        while IFS=',' read -r <&4 elastix_ssh_host elastix_ssh_passwd elastix_mysql_passwd; do
            if _isnum "$(printf "%s\\n" "${elastix_ssh_host}" | cut -f2 -d:)" ; then
                elastix_ssh_port="$(printf "%s\\n" "${elastix_ssh_host}" | cut -f2 -d:)"
            else
                elastix_ssh_port="22"
            fi
            elastix_ssh_host="$(printf "%s\\n" "${elastix_ssh_host}" | cut -f1 -d:)"

            [ -z "${elastix_ssh_passwd}" ]   && elastix_ssh_passwd="$(_decode64 "${DEFAULT_SSH_PASSWD}")"
            [ -z "${elastix_mysql_passwd}" ] && elastix_mysql_passwd="$(_decode64 "${DEFAULT_MYSQL_PASSWD}")"

            elastix_ssh_host_array+=("${elastix_ssh_host}")
            elastix_ssh_port_array+=("${elastix_ssh_port}")
            elastix_ssh_passwd_array+=("${elastix_ssh_passwd}")
            elastix_mysql_passwd_array+=("${elastix_mysql_passwd}")
        done 4< "${elastix_credentials}"
    else
        printf "%s\\n" "Verifying credentials ..."

        [ -z "${elastix_ssh_host}" ] && elastix_ssh_host="localhost"
        [ -z "${elastix_ssh_passwd}" ] && elastix_ssh_passwd="$(_decode64 "${DEFAULT_SSH_PASSWD}")"
        [ -z "${elastix_mysql_passwd}" ] && elastix_mysql_passwd="$(_decode64 "${DEFAULT_MYSQL_PASSWD}")"

        if _isnum "$(printf "%s\\n" "${elastix_ssh_host}" | cut -f2 -d:)" ; then
            elastix_ssh_port="$(printf "%s\\n" "${elastix_ssh_host}" | cut -f2 -d:)"
        else
            elastix_ssh_port="22"
        fi
        elastix_ssh_host="$(printf "%s\\n" "${elastix_ssh_host}" | cut -f1 -d:)"

        if ! sshpass -p "${elastix_ssh_passwd}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port}" "${elastix_ssh_host}" "mysql -uroot -p${elastix_mysql_passwd} -e 'use asterisk'" ; then
            _die "${elastix_credentials}: invalid credentials for ${elastix_ssh_host}"
        fi

        elastix_ssh_host_array=("${elastix_ssh_host}")
        elastix_ssh_port_array=("${elastix_ssh_port}")
        elastix_ssh_passwd_array=("${elastix_ssh_passwd}")
        elastix_mysql_passwd_array=("${elastix_mysql_passwd}")
    fi

    if [ X"${1}" = X"add" ]; then
        for (( i = 0 ; i < ${#elastix_ssh_host_array[@]} ; i=$i+1 ));
        do
            remote_db=""
            remote_db="$(sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysqldump -p${elastix_mysql_passwd_array[${i}]} asterisk --extended=FALSE")"

            if $(printf "%s\\n" "${remote_db}" | grep "${elastix_format_host}" | grep "host" >/dev/null); then
                id="$(printf "%s\\n" "${remote_db}" | grep "${elastix_format_host}" | grep "host" | cut -f1 -d"," | cut -f2 -d"(" | tr -d "'")"
               [ -z "${id}" ] && _die "internal error: id column wasn't found on asterisk database, the elastix system may be broken"

                trunk_name="$(sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"SELECT data FROM sip WHERE id=\\\"${id}\\\" AND flags=\"2\";\"")"
                [ -z "${trunk_name}" ] && _die "internal error: data column wasn't found on asterisk database, the elastix system may be broken"

                trunk_id="$(sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"SELECT trunkid FROM trunks WHERE name=\\\"${trunk_name}\\\";\"")"
                [ -z "${trunk_name}" ] && _die "internal error: data column wasn't found on asterisk database, the elastix system may be broken"

                printf "%s\\n" "${elastix_format_host} is already declared in trunk ${trunk_name}, skipping ..."
            else
                if $(printf "%s\\n" "${remote_db}" | grep "${elastix_format_trunk}" | grep "account" >/dev/null); then
                    printf "%s\\n" "${elastix_format_trunk} is already declared as trunk, use another trunk name, skipping ..."
                else
                    printf "%s\\n" "adding new ${elastix_format_trunk} trunk ..."

                    higher_trunk_id="$(sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"SELECT trunkid FROM trunks;\"")"
                    [ -z "${higher_trunk_id}" ] && _die "internal error: trunkid column wasn't found on asterisk database, the elastix system may be broken"
                    higher_trunk_id="$(printf "%s\\n" "${higher_trunk_id}" | tail -1)"
                    higher_trunk_id="$((${higher_trunk_id} + 1))" #define next trunk

                    if ! sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"
                        INSERT INTO trunks VALUES (${higher_trunk_id},'${elastix_format_trunk}','sip','','off','','','','${elastix_format_trunk}','','','off');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','account','${elastix_format_trunk}','2');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','host','${elastix_format_host}','3');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','proxy','${elastix_format_proxy}','4');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','srvlookup','${elastix_format_srvlookup}','5');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','secret','${elastix_format_secret}','6');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','username','${elastix_format_username}','7');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','type','${elastix_format_type}','8');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','fromuser','${elastix_format_fromuser}','9');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','fromdomain','${elastix_format_fromdomain}','10');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','canreinvite','${elastix_format_canreinvite}','11');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','qualify','${elastix_format_qualify}','12');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','nat','${elastix_format_nat}','13');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','insecure','${elastix_format_insecure}','14');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','dtmfmode','${elastix_format_dtmfmode}','15');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','disallow','${elastix_format_disallow}','16');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','allow','${elastix_format_allow}','17');
                        INSERT INTO sip VALUES ('tr-peer-${higher_trunk_id}','context','${elastix_format_context}','18');\""; then
                        _die "Error adding trunk ${elastix_format_trunk}, review manually the asterisk database"
                    fi
                    if [ -n "${elastix_format_register}" ]; then
                        if ! sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"INSERT INTO sip VALUES ('tr-reg-${higher_trunk_id}','register','${elastix_format_register}','0');\""; then
                        _die "Error adding the id field to the sip table, review manually the asterisk database"
                        fi
                        fi
                fi
            fi

            if ! sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "cd /var/lib/asterisk/bin; php /var/www/html/admin/modules/framework/bin/retrieve_conf" > /dev/null 2>&1 ; then
                _die "Error retriving conf, this should *never* happen, if you're looking at this message review this program and the elastix server, something is seriously broken"
            fi

            if ! sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "amportal admin reload" > /dev/null 2>&1 ; then
                _die "Error reloading elastix services, this should *never* happen, if you're looking at this message review this program and the elastix server, something is seriously broken"
            fi
        done
    elif [ X"${1}" = X"remove" ]; then
        for (( i = 0 ; i < ${#elastix_ssh_host_array[@]} ; i=$i+1 ));
        do
            remote_db=""
            remote_db="$(sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysqldump -p${elastix_mysql_passwd_array[${i}]} asterisk --extended=FALSE")"

            if ! $(printf "%s\\n" "${remote_db}" | grep "${2}" | grep "host" >/dev/null); then
                printf "%s\\n" "'${2}' not found, skipping ..."
            else
                id="$(printf "%s\\n" "${remote_db}" | grep "${2}" | grep "host" | cut -f1 -d"," | cut -f2 -d"(" | tr -d "'")"
                [ -z "${id}" ] && _die "internal error: id column wasn't found on asterisk database, the elastix system may be broken"

                trunk_name="$(sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"SELECT data FROM sip WHERE id=\\\"${id}\\\" AND flags=\"2\";\"")"
                [ -z "${trunk_name}" ] && _die "internal error: data column wasn't found on asterisk database, the elastix system may be broken"

                trunk_id="$(sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"SELECT trunkid FROM trunks WHERE name=\\\"${trunk_name}\\\";\"")"
                [ -z "${trunk_name}" ] && _die "internal error: data column wasn't found on asterisk database, the elastix system may be broken"

                id_reg="$(printf "%s\\n" "${remote_db}" | grep "register" | grep "tr-reg-${trunk_id}" | cut -f1 -d"," | cut -f2 -d"(" | tr -d "'")"

                printf "%s\\n" "${2} is trunk ${trunk_name}, deleting ..."

                if ! sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"DELETE FROM sip WHERE id=\\\"${id}\\\";\"" ; then
                    _die "Error deleting trunk ${trunk_name}, review manually the asterisk database"
                fi

                if ! sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"DELETE FROM sip WHERE id=\\\"${id}\\\";\"" ; then
                    _die "Error deleting trunk ${trunk_name}, review manually the asterisk database"
                fi

                if ! sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"DELETE FROM trunks WHERE trunkid=\\\"${trunk_id}\\\";\"" ; then
                    _die "Error deleting trunk ${trunk_name}, review manually the asterisk database"
                fi

                if [ -n "${id_reg}" ]; then
                    if ! sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"DELETE FROM sip WHERE id=\\\"${id_reg}\\\";\"" ; then
                        _die "Error deleting trunk ${trunk_name}, review manually the asterisk database"
                    fi
                fi

                if ! sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "cd /var/lib/asterisk/bin; php /var/www/html/admin/modules/framework/bin/retrieve_conf" > /dev/null 2>&1 ; then
                    _die "Error retriving conf, this should *never* happen, if you're looking at this message review this program and the elastix server, something is seriously broken"
                fi

                if ! sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "amportal admin reload" > /dev/null 2>&1 ; then
                    _die "Error reloading elastix services, this should *never* happen, if you're looking at this message this program and the elastix server, something is seriously broken"
                fi
            fi
        done
    elif [ X"${1}" = X"edit" ]; then
        for (( i = 0 ; i < ${#elastix_ssh_host_array[@]} ; i=$i+1 ));
        do
            remote_db=""
            remote_db="$(sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysqldump -p${elastix_mysql_passwd_array[${i}]} asterisk --extended=FALSE")"

            if ! $(printf "%s\\n" "${remote_db}" | grep "${2}" | grep "host" >/dev/null); then
                printf "%s\\n" "${2} not found, skipping ..."
            else
                id="$(printf "%s\\n" "${remote_db}" | grep "${2}" | grep "host" | cut -f1 -d"," | cut -f2 -d"(" | tr -d "'")"
                [ -z "${id}" ] && _die "internal error: id column wasn't found on asterisk database, the elastix system may be broken"

                trunk_name="$(sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"SELECT data FROM sip WHERE id=\\\"${id}\\\" AND flags=\"2\";\"")"
                [ -z "${trunk_name}" ] && _die "internal error: data column wasn't found on asterisk database, the elastix system may be broken"

                trunk_id="$(sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"SELECT trunkid FROM trunks WHERE name=\\\"${trunk_name}\\\";\"")"
                [ -z "${trunk_name}" ] && _die "internal error: data column wasn't found on asterisk db, the elastix system may be broken"

                printf "%s\\n" "${2} is trunk ${trunk_name}, changing host to ${3} ..."

                if ! sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "mysql asterisk -p${elastix_mysql_passwd_array[${i}]} -se \"UPDATE sip SET data=\\\"${3}\\\" WHERE data=\\\"${2}\\\";\"" ; then
                    _die "Error editing trunk ${trunk_name}, review manually the asterisk database"
                fi

                if ! sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "cd /var/lib/asterisk/bin; php /var/www/html/admin/modules/framework/bin/retrieve_conf" > /dev/null 2>&1 ; then
                    _die "Error retriving conf, this should *never* happen, if you're looking at this message review this program and the elastix server, something is seriously broken"
                fi

                if ! sshpass -p "${elastix_ssh_passwd_array[${i}]}" ssh -o StrictHostKeyChecking=no -o Port="${elastix_ssh_port_array[${1}]}" "${elastix_ssh_host_array[${i}]}" "amportal admin reload" > /dev/null 2>&1 ; then
                    _die "Error reloading elastix services, this should *never* happen, if you're looking at this message review this program and the elastix server, something is seriously broken"
                fi
            fi
        done
    fi
}

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- "${@}" $(cat)
fi

[ "${#}" -eq "0" ] && _usage >&2 && exit 1 # no options

for arg in "${@}"; do #parse options
    case "${arg}" in
        --help) _usage && exit ;;
        -c)
            if [ "${#}" -gt "1" ]; then
                elastix_credentials="${@:2:1}"
                [ ! -f "${elastix_credentials}" ] && _die "'${elastix_credentials}' doesn't exist"
                shift 2
            else
                _die "Option '${arg}' requires a FILE parameter"
            fi
            ;;
        -h)
            if [ "${#}" -gt "1" ]; then
                elastix_ssh_host="${@:2:1}"
                shift 2
            else
                _die "Option '${arg}' requires a Host string"
            fi
            ;;
        -p)
            if [ "${#}" -gt "1" ]; then
                elastix_ssh_passwd="${@:2:1}"
                shift 2
            else
                _die "Option '${arg}' requires a Password string"
            fi
            ;;
        -m)
            if [ "${#}" -gt "1" ]; then
                elastix_mysql_passwd="${@:2:1}"
                shift 2
            else
                _die "Option '${arg}' requires a Password string"
            fi
            ;;
        -*) _die "$(expr "${0}" : '.*/\([^/]*\)'): unrecognized option '${arg}'" ;;
    esac
done

if ! command -v "sshpass" >/dev/null 2>&1; then
    #it may be slow but it doesn't requires anything on the server side besides plain password protected ssh access
    #addional remote control mediums are welcome
    _die "install 'sshpass' to run this program"
fi

if ! _networkup; then
    printf "%s\\n" "$(_basename "${0}"): network not detected, exiting..."
    exit 1
fi

case "${1}" in #parse services
    trunk)
        case "${2}" in
            add|remove|edit) shift; _trunk "$@" ;;
            *)  [ -z "${2}" ] && _die "Missing param for: ${1}" || _die "Unrecognized arg: '${2}'" ;;
        esac
        ;;
    *)
        [ -z "${1}" ] && _die "Parameters missing" || _die  "Unrecognized arg: '${1}'"
esac
