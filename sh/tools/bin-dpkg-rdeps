#!/bin/sh
#description: show debian|ubuntu package deps of binaries
#usage: bin-dpkg-rdeps /full/path/binary

#example: bin-dpkg-rdeps /usr/bin/lsof
#libc6
#libc6-armel-cross
#libc6-armhf-cross
#libc6-i386

PROGNAME="$(expr "${0}" : '.*/\([^/]*\)')"

_false() {
    return 1
}

_rdeps() {
    for _rdeps__binary in "${@}"; do
        fpath="$(command -v "${_rdeps__binary}")"
        if [ -z "${fpath}" ]; then
            fpath="${_rdeps__binary}"
            [ ! -f "${fpath}" ] && continue
        fi

        if [ -n "${fpath}" ]; then
            if ldd "${fpath}" >/dev/null 2>/dev/null; then
                for _rdeps__library in $(ldd "${fpath}" | sort -n | uniq | awk '{print $1}'); do
                    _rdeps__pkgs="${_rdeps__pkgs} $(apt-file search "${_rdeps__library}")"
                done
                printf "%s\\n" "${_rdeps__pkgs}" | cut -d':' -f1 | sort | uniq | awk 'NF { sub(/^[ \t]+/, ""); print }'
            else
                printf "${PROGNAME}: %s\\n" "not a dynamic executable '${fpath}'" >&2 && _false
            fi
        fi
    done
}

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- "${@}" $(cat)
fi

[ "${#}" -eq "0" ] && { printf "Usage: %s\\n" "${PROGNAME} binary ..." >&2; exit 1; }

for arg in "${@}"; do #parse options
    case "${arg}" in
        -h|--help) { printf "Usage: %s\\n" "${PROGNAME} binary ..."; exit; } ;;
        -*) printf "%s\\n" "${PROGNAME}: unrecognized option '${arg}'" >&2
            printf "Usage: %s\\n" "${PROGNAME} binary ..." >&2
            exit 1 ;;
    esac
done

if ! command -v "apt-file" >/dev/null 2>&1; then
    printf "%s\\n" "install 'apt-file' to run this program" >&2
    exit 1
fi

_rdeps "${@}"
