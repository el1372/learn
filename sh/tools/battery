#!/bin/sh

_usage() {
    printf "%s\\n" "Usage: ${PROGNAME} [OPTION]"
    printf "%s\\n" "Battery info script."
    printf "\\n"
    printf "%s\\n" "  -a   output ascii instead of spark"
    printf "%s\\n" "  -b   battery path (/sys/class/power_supply/BAT0)"
    printf "%s\\n" "  -e   don't output the emoji"
    printf "%s\\n" "  -r   output remaining time"
    printf "%s\\n" "  -s   only output when battery is the primary energy source"
    printf "%s\\n" "  -p   use pmset (more accurate)"
    printf "%s\\n" "  -t   output tmux status bar format"
    printf "%s\\n" "  -z   output zsh prompt format"
    printf "\\n"
    printf "%s\\n" "Colors:                                             tmux     zsh"
    printf "\\n"
    printf "%s\\n" "  -g <color> good   battery level | default: 1;32 | green  | 64"
    printf "%s\\n" "  -m <color> middle battery level | default: 1;33 | yellow | 136"
    printf "%s\\n" "  -w <color> warn   battery level | default: 0;31 | red    | 160"
    printf "\\n"
    printf "%s\\n" "  -h, --help   show this message and exit"
}

_die() {
    [ -z "${1}" ] || printf "%s\\n" "${*}" >&2
    _usage >&2; exit 1
}

_subchar() { #print n character in string
    [ -z "${1}" ] && return 1
    [ -z "${2}" ] && return 1

    if [ "${2}" -lt "0" ]; then
        _subchar__pos="$((${#1} + ${2}))"
    else
        _subchar__pos="${2}"
    fi

    [ "${_subchar__pos}" -ge "${#1}" ] && return 1
    [ "${_subchar__pos}" -lt "0" ]     && return 1

    _subchar__string="${1}"

    i="0"; while [ "${i}" -le "${_subchar__pos}" ]; do
        _subchar__char="${_subchar__string#?}"
        _subchar__char="${_subchar__string%$_subchar__char}"
        i="$((i+1))"
        _subchar__string="${_subchar__string#?}"
    done
    #_subchar__retval="${_subchar__char}"
    printf "%s\\n" "${_subchar__char}"
}

_battery_charge() {
    case "$(uname -s)" in
        "Darwin")
            if [ -n "${pmset_on}" ] && command -v "pmset" >/dev/null 2>&1; then
                if pmset -g batt | grep -q 'AC Power'; then
                    BATT_CONNECTED=1
                fi
                BATT_PCT="$(pmset -g batt | grep -o '[0-9]*%' | tr -d %)"
            else
                ioreg -n AppleSmartBattery -r    | \
                    grep -o '"[^"]*" = [^ ]*'    | \
                    sed -e 's/= //g' -e 's/"//g' | \
                    sort | while read -r key value; do
                        case "${key}" in
                            "MaxCapacity")     maxcap="${value}" ;;
                            "CurrentCapacity") curcap="${value}" ;;
                            "ExternalConnected")
                                if [ "${value}" != "No" ]; then
                                    BATT_CONNECTED=1
                                fi
                                ;;
                        esac
                        if [ -n "${maxcap}" ] && [ -n "${curcap}" ]; then
                            BATT_PCT="$((100 * curcap / maxcap))"
                        fi
                    done
            fi
            ;;

        "Linux")
            case "$(cat /etc/*-release)" in
                *"Arch Linux"*|*"Ubuntu"*|*"openSUSE"*)
                    battery_state="$(cat "${battery_path}/energy_now")"
                    battery_full="${battery_path}/energy_full"
                    battery_current="${battery_path}/energy_now"
                    ;;
                *)
                    battery_state="$(cat "${battery_path}/status")"
                    battery_full="${battery_path}/charge_full"
                    battery_current="${battery_path}/charge_now"
                    ;;
            esac

            if [ "${battery_state}" != "Discharging" ]; then
                BATT_CONNECTED=1
            fi

            now="$(cat  "${battery_current}")"
            full="$(cat "${battery_full}")"
            BATT_PCT="$((100 * now / full))"

            if [ -n "${remaining_time}" ]; then
                BATT_REMAINING_TIME="$(acpi | awk '{print $5}')"

                BATT_REMAINING_TIME_HOURS="${BATT_REMAINING_TIME%%:*}"
                BATT_REMAINING_TIME_MINUTES="${BATT_REMAINING_TIME%:*}"
                BATT_REMAINING_TIME_MINUTES="${BATT_REMAINING_TIME_MINUTES##*:}"
                BATT_REMAINING_TIME_SECONDS="${BATT_REMAINING_TIME##*:}"

                if [ "${BATT_REMAINING_TIME_HOURS}" != "00" ]; then
                    BATT_REMAINING_TIME="${BATT_REMAINING_TIME_HOURS}h"
                else
                    BATT_REMAINING_TIME=""
                fi

                if [ "${BATT_REMAINING_TIME_MINUTES}" != "00" ]; then
                    if [ -z "${BATT_REMAINING_TIME}" ]; then
                        BATT_REMAINING_TIME="${BATT_REMAINING_TIME_MINUTES}m"
                    else
                        BATT_REMAINING_TIME="${BATT_REMAINING_TIME} ${BATT_REMAINING_TIME_MINUTES}m"
                    fi
                fi

                if [ "${BATT_REMAINING_TIME_SECONDS}" != "00" ]; then
                    if [ -z "${BATT_REMAINING_TIME}" ]; then
                        BATT_REMAINING_TIME="${BATT_REMAINING_TIME_SECONDS}s"
                    else
                        BATT_REMAINING_TIME="${BATT_REMAINING_TIME} ${BATT_REMAINING_TIME_SECONDS}s"
                    fi
                fi
            fi
            ;;
    esac
}

_apply_colors() { #apply the correct color to the battery status prompt
    #green
    if [ "${BATT_PCT}" -ge "75" ]; then
        if [ -n "${output_tmux}" ]; then
            COLOR="#[fg=${good_color}]"
        elif [ -n "${output_zsh}" ]; then
            COLOR="%F{${good_color}}"
        else
            COLOR="${good_color}"
        fi

    #yellow
    elif [ "${BATT_PCT}" -ge "25" ] && [ "${BATT_PCT}" -lt "75" ]; then
        if [ -n "${output_tmux}" ]; then
            COLOR="#[fg=${middle_color}]"
        elif [ -n "${output_zsh}" ]; then
            COLOR="%F{${middle_color}}"
        else
            COLOR="${middle_color}"
        fi

    #red
    elif [ "${BATT_PCT}" -lt "25" ]; then
        if [ -n "${output_tmux}" ]; then
            COLOR="#[fg=${warn_color}]"
        elif [ -n "${output_zsh}" ]; then
            COLOR="%F{${warn_color}}"
        else
            COLOR="${warn_color}"
        fi
    fi
}

_print_status() { #print the battery status
    if [ -z "${not_emoji}" ] && [ -n "${BATT_CONNECTED}" ]; then
        GRAPH="âš¡"
    else
        if command -v spark >/dev/null 2>&1; then
            sparks="$(spark 0 "${BATT_PCT}" 100)"
            GRAPH="$(_subchar "${sparks}" 1)"
        else
            ascii=1
        fi
    fi

    if [ -n "${ascii}" ]; then
        barlength="${#ascii_bar}"

        #battery percentage rounded to the lenght of ascii_bar
        rounded_n="$((barlength * BATT_PCT / 100 + 1))"

        #creates the bar
        GRAPH="$(printf "[%-${barlength}s]" "$(printf "%s\\n" "${ascii_bar}" | cut -c1-"${rounded_n}")")"
    fi

    if [ -n "${output_tmux}" ]; then
        if [ -n "${remaining_time}" ]; then
            printf "%s%s%s" "${COLOR}" "${GRAPH} ${BATT_PCT}% ${BATT_REMAINING_TIME}" "#[default]"
        else
            printf "%s%s%s" "${COLOR}" "${GRAPH} ${BATT_PCT}%" "#[default]"
        fi
    elif [ -n "${output_zsh}" ]; then
        if [ -n "${remaining_time}" ]; then
            printf "%%B%s%s %s" "${COLOR}" "${GRAPH}" "${BATT_PCT}%% ${BATT_REMAINING_TIME}"
        else
            printf "%%B%s%s %s" "${COLOR}" "${GRAPH}" "${BATT_PCT}%%"
        fi
    else
        if [ -n "${remaining_time}" ]; then
            printf "\\033[0;%sm%s %s \\033m\n" "${COLOR}" "${GRAPH}" "${BATT_PCT}% ${BATT_REMAINING_TIME}"
        else
            printf "\\033[0;%sm%s %s \\033m\n" "${COLOR}" "${GRAPH}" "${BATT_PCT}%"
        fi
    fi
}

_set_defaults() { #default behavior
    ascii_bar='=========='
    good_color="1;32"
    middle_color="1;33"
    warn_color="0;31"
    battery_path="/sys/class/power_supply/BAT0"
}

PROGNAME="$(expr "${0}" : '.*/\([^/]*\)')"
_set_defaults

for arg in "${@}"; do #parse options
    case "${arg}" in
        -h|--help|-\?) _usage && exit ;;
        -a) ascii=1; shift ;;
        -e) not_emoji=1; shift ;;
        -r) remaining_time=1; shift ;;
        -s) show_only_on_discharging=1; shift ;;
        -p) pmset_on=1; shift ;;
        -t|-tsr) #common tmux conf
            output_tmux=1
            good_color="green"
            middle_color="yellow"
            warn_color="red"

            case "${arg}" in
                -tsr) remaining_time=1; show_only_on_discharging=1; ;;
            esac

            shift
            ;;
        -z) output_zsh=1
            good_color="64"
            middle_color="136"
            warn_color="160"
            shift
            ;;
        -g)
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                    -*) _die "Option '${arg}' requires a parameter" ;;
                esac
                shift; good_color="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi
            ;;
        -m)
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                    -*) _die "Option '${arg}' requires a parameter" ;;
                esac
                shift; middle_color="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi
            ;;
        -w)
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                    -*) _die "Option '${arg}' requires a parameter" ;;
                esac
                shift; warn_color="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi
            ;;
        -b)
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                    -*) _die "Option '${arg}' requires a parameter" ;;
                esac
                shift; battery_path="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi
            ;;
        -*) _die "${PROGNAME}: unrecognized option '${arg}'" ;;
    esac
done

_battery() {
    _battery_charge
    _apply_colors
    _print_status
}

if [ -n "${show_only_on_discharging}" ]; then
    if acpi | grep Discharging >/dev/null 2>&1; then
        _battery
    fi
else
    _battery
fi
