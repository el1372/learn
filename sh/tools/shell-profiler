#!/bin/sh
#description: profile shell scripts, based in https://stackoverflow.com/a/20855353/890858
#usage: shell-profiler SCRIPT

#example:
#shell-profiler hello-world.sh
#0000000000.000000000 0000000000.000000000 BEGIN
#0000000000.000000000 0000000000.000081292 + printf '%s\n' 'Hola mundo o/'
#0000000000.000081292 0000000000.000000000 TOTAL

VERSION="2018.09.08-14:38"
SRC_URL="https://raw.githubusercontent.com/javier-lopez/learn/master/sh/tools/"

SLOWEST_LINES="3"
NOT_SO_SLOWEST_LINES_YET_SLOW="5"

#colors
DEFAULT="$(printf "\\033[0;39m")"
WHITE_BOLD="$(printf "\\033[1m")"
WHITE_BG="$(printf "\\033[7m")"
RED="$(printf "\\033[0;31m")"
YELLOW="$(printf "\\033[0;33m")"

_usage() {
    printf "%s\\n" "Usage: ${PROGNAME} [OPTION]... USER/REPO ..."
    printf "%s\\n" "A shell profiler"
    printf "\\n"
    printf "%b\\n" "  -U, --update    update this program to latest version"
    printf "%s\\n" "  -V, --version   display version"
    printf "%b\\n" "  -h, --help      show this message and exit"
}

_die() {
    [ -z "${1}" ] || printf "%s\\n" "${*}" >&2
    _usage; >&2; exit 1
}

_basename() {
    [ -z "${1}" ] && return 1 || _basename__name="${1}"
    [ -z "${2}" ] || _basename__suffix="${2}"
    case "${_basename__name}" in
        /*|*/*) _basename__name="${_basename__name##*/}"
    esac

    if [ -n "${_basename__suffix}" ] && [ "${#_basename__name}" -gt "${#2}" ]; then
        _basename__name="${_basename__name%$_basename__suffix}"
    fi

    printf "%s\\n" "${_basename__name}"
}

_update() {
    _u__current_file="$(cd "$(dirname "${0}")" && pwd)/${PROGNAME}"
    _u__current_version_long="$(awk -F\" \
        '/VERSION=/{print $2;exit}' "${_u__current_file}" 2>/dev/null)"
    _u__current_version="$(printf "%s\\n" "${_u__current_version_long}" | \
        awk '{gsub(/[\.:]/,"");gsub(/-/,"");print;exit}' 2>/dev/null)"
    [ -z "${_u__current_version}" ] && printf "%s\\n%s\\n%s\\n"           \
        "ERROR: Failed to detect current version, please update manually" \
        "${PROGNAME}         = ${_u__current_file}"                       \
        "${PROGNAME} version = ${_u__current_version}" >&2 && return 1

    command -v "wget" >/dev/null 2>&1 || command -v "curl" >/dev/null 2>&1 || \
        { printf "%s\\n" "ERROR: Install either 'wget' or 'curl' to upgrade" >&2; return 1; }

    _u__url="${SRC_URL}/${PROGNAME}"
    _u__tmpfile="/tmp/${PROGNAME}.${$}.update"

    _u__error_msg="$(wget -q -O- --no-check-certificate "${_u__url}" \
        > "${_u__tmpfile}" 2>&1   || curl -s -L "${_u__url}"  \
        > "${_u__tmpfile}" 2>&1)" || { printf "%s\\n%s\\n" \
        "ERROR: Failed to fetch update, please try later or update manually" \
        "${_u__error_msg}" >&2; return 1; }

    _u__update_version_long="$(awk -F\" \
        '/VERSION=/{print $2;exit}' "${_u__tmpfile}" 2>/dev/null)"
    _u__update_version="$(printf "%s\\n" "${_u__update_version_long}" | awk \
        '{gsub(/[\.:]/,"");gsub(/-/,"");print;exit}' 2>/dev/null)"
    [ -n "${_u__update_version}" ] || _u__update_version="0"

    if [ "${_u__current_version}" -lt "${_u__update_version}" ]; then
        printf "%s %s\\n" "Updating from version" \
            "${_u__current_version_long} to ${_u__update_version_long} ..."
        chmod +x "${_u__tmpfile}"
        if ! mv -f "${_u__tmpfile}" "${_u__current_file}" 2>/dev/null; then
            printf "%s\\n" "ERROR: no write permissions on ${_u__current_file}" >&2
            printf "%s\\n" "INFO : trying with sudo ..." >&2
            if command -v "sudo" >/dev/null 2>&1; then
                sudo mv "${_u__tmpfile}" "${_u__current_file}" || return 1
            else
                printf "%s\\n" "ERROR: sudo isn't available, exiting ..." >&2
                rm -rf "${_u__tmpfile}"
                return 1
            fi
        fi
        printf "%s %s\\n" "${PROGNAME} is up-to-date (${_u__update_version_long})"
        return 0
    fi
    printf "%s %s\\n" "${PROGNAME} is up-to-date (${_u__current_version_long})"
    rm -rf "${_u__tmpfile}"
}

_show_version() {
    printf "%s\\n" "${PROGNAME} ${VERSION}"
}

_printfl() { #print lines
    command -v "tput" >/dev/null 2>&1 && _printfl_var_max_len="$(tput cols)"
    _printfl_var_max_len="${_printfl_var_max_len:-80}"
    if [ -n "${1}" ]; then
        _printfl_var_word_len="$(expr "${#1}" + 2)"
        _printfl_var_sub="$(expr "${_printfl_var_max_len}" - "${_printfl_var_word_len}")"
        _printfl_var_half="$(expr "${_printfl_var_sub}" / 2)"
        _printfl_var_other_half="$(expr "${_printfl_var_sub}" - "${_printfl_var_half}")"
        printf "%b" "${WHITE_BOLD}"
        printf '%*s' "${_printfl_var_half}" '' | tr ' ' -
        printf "%b" "${WHITE_BG}" #white background
        printf " %s " "${1}"
        printf "%b" "${DEFAULT}${WHITE_BOLD}"
        printf '%*s' "${_printfl_var_other_half}" '' | tr ' ' -
        printf "%b" "${DEFAULT}" #back to normal
        printf "\\n"
    else
        printf "%b" "${WHITE_BOLD}"
        printf '%*s' "${_printfl_var_max_len}" '' | tr ' ' -
        printf "%b" "${DEFAULT}"
        printf "\\n"
    fi
}

_profiler() {
    for script in "${@}"; do
        mkdir -p "${TMPDIR}"
        tmp_script_name="${TMPDIR}/$(basename "${script}").$$"

        printf "%s\\n" "#!/bin/bash"     >  "${tmp_script_name}.bash"
        cat >> "${tmp_script_name}.bash" << E=O=F
exec 3>&2 2> >(tee '${tmp_script_name}.log' | sed -u 's/^.*$/now/' | date -f - +%s.%N > '${tmp_script_name}.time'); set -x
E=O=F

        awk 'NR!=1' "${script}"         >> "${tmp_script_name}.bash"

        printf "%s\\n" "set +x"         >> "${tmp_script_name}.bash"
        printf "%s\\n" "exec 2>&3 3>&-" >> "${tmp_script_name}.bash"

        bash "${tmp_script_name}.bash" >/dev/null
        sleep 0.1 || sleep 1

        printf "%s\\n" "BEGIN" > "${tmp_script_name}.log.1"
        cat "${tmp_script_name}.log" >> "${tmp_script_name}.log.1"
        mv "${tmp_script_name}.log.1" "${tmp_script_name}.log"
        sed -i '$d' "${tmp_script_name}.log"
        printf "%s\\n" "TOTAL" >> "${tmp_script_name}.log"

        while read time; do
            time="$(printf "%s\\n" "${time}"|tr -d '.')" #0123456789.012345678
            [ -z "${last}" ] && last="${time}" && total_time="0"
            current_time="$((time - last))"
            total_time="$((total_time + current_time))"

            pcurrent_time="$(printf "%019d\n" "${current_time}")"
            ptotal_time="$(printf   "%019d\n" "${total_time}")"
            pcurrent_time="$(printf "${pcurrent_time}\\n"|cut -c1-10).$(printf "${pcurrent_time}\\n"|cut -c11-19)"
            ptotal_time="$(printf "${ptotal_time}\\n"|cut -c1-10).$(printf "${ptotal_time}\\n"|cut -c11-19)"

            printf "%s %s\n" "${ptotal_time}" "${pcurrent_time}"
            last="${time}"
        done < "${tmp_script_name}.time" > "${tmp_script_name}.time_format"

        ptotal_time="$(printf   "%019d\n" "${total_time}")"
        ptotal_time="$(printf "${ptotal_time}\\n"|cut -c1-10).$(printf "${ptotal_time}\\n"|cut -c11-19)"
        printf "%s %s\n" "${ptotal_time}" "0000000000.000000000" >> "${tmp_script_name}.time_format"

        _printfl "Profiling ${script}"

        SLOWEST_LINES_NR="$(awk '{print NR, $2}' "${tmp_script_name}.time_format" | \
            sort -k2 -r | head "-${SLOWEST_LINES}" | awk '{print $1}')"
        NOT_SO_SLOWEST_LINES_YET_SLOW_NR="$(awk '{print NR, $2}' "${tmp_script_name}.time_format" | \
            sort -k2 -r | sed "1,${SLOWEST_LINES}d"  | \
            head "-${NOT_SO_SLOWEST_LINES_YET_SLOW}" | awk '{print $1}')"

        paste "${tmp_script_name}.time_format" "${tmp_script_name}.log" | sed 's:\t: :g' | while read -r line; do
            [ -z "${current_line}" ] && current_line="1"

            if printf "%s\\n" "${SLOWEST_LINES_NR}" | grep '^'"${current_line}"'$' >/dev/null 2>&1; then
                printf "%s\\n" "${RED}${line}${DEFAULT}"
            elif printf "%s\\n" "${NOT_SO_SLOWEST_LINES_YET_SLOW_NR}" | grep '^'"${current_line}"'$' >/dev/null 2>&1; then
                printf "%s\\n" "${YELLOW}${line}${DEFAULT}"
            else
                printf "%s\\n" "${line}"
            fi

            current_line="$((current_line + 1))"
        done
    done

    rm -rf "${TMPDIR}"
}

PROGNAME="$(_basename "${0}")"
TMPDIR="/tmp/${PROGNAME}"

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add it to the end of $@
    set -- "${@}" $(cat)
fi

[ "${#}" -eq "0" ] && _die

for arg in "${@}"; do #parse options
    case "${arg}" in
        -h|--help)    _usage;  exit ;;
        -U|--update)  _update; exit "${?}" ;;
        -V|--version) _show_version; exit "${?}" ;;
        -*) _die "${PROGNAME}: unrecognized option '${arg}'" ;;
    esac
done

_profiler "${@}"
