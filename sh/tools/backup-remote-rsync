#!/bin/sh
#description: backup directories to a remote system
#usage: backup-remote-rsync -r domain[:/path] [options] [local_dir ...]"

#example: backup-remote-rsync -r b.javier.io:~/backup/$(hostname -f) -v -u admin -i /home/user/.ssh/id_rsa /home/user
#creates backup-remote-rsync.log, root-home-user/, root-home-user.dotfiles/ inside b.javier.io:~/backup/$(hostname -f)
#==================================
#Fri May  2 00:27:38 CDT 2013
#==================================
#[V]: exec         : ssh -o PasswordAuthentication=no ...
#[V]: files        : /home/user|
#[V]: remote user  : admin
#[V]: remote server: b.javier.io:~/backup/sup
#[V]: remote port  : 22
#[V]: ssh key      : /home/user/.ssh/id_rsa
#[V]: log          : /tmp/backup-remote-rsync.log
#[V]: exec         : ssh -i /home/user/.ssh/id_rsa ...
#[V]:
#[V]: realpath     : /home/user
#[V]: remotepath   : root-home-user
#[V]: exec         : rsync -avz ---partial -e "ssh -i /home/user ...
#sending incremental file list
#deleting 05b_refusal.pdf
#code/learn/sh/lib
#code/learn/sh/is/kernel-ck-ubuntu
#...

_basename() {
    [ -z "${1}" ] && return 1 || _basename__name="${1}"
    [ -z "${2}" ] || _basename__suffix="${2}"
    case "${_basename__name}" in
        /*|*/*) _basename__name="$(expr "${_basename__name}" : '.*/\([^/]*\)')" ;;
    esac

    if [ -n "${_basename__suffix}" ] && [ "${#_basename__name}" -gt "${#2}" ]; then
        if [ X"$(printf "%s" "${_basename__name}" | \
            cut -c"$((${#_basename__name} - ${#_basename__suffix} + 1))"-"${#_basename__name}")" \
           = X"$(printf "%s" "${_basename__suffix}")" ]; then
            _basename__name="$(printf "%s" "${_basename__name}" \
                | cut -c1-"$((${#_basename__name} - ${#_basename__suffix}))")"
        fi
    fi

    printf "%s\\n" "${_basename__name}"
}

_realpath() {
    #print absolute path
    [ -z "${1}" ] && return 1

    #start with the file name (sans the trailing slash)
    _realpath__path="${1%/}"

    #if we stripped off the trailing slash and were left with nothing, that
    #means we're in the root directory
    [ -z "${_realpath__path}" ] && _realpath__path="/"

    #get the basename of the file (ignoring '.' & '..', because they're really
    #part of the path)
    _realpath__file_basename="${_realpath__path##*/}"
    if [ X"${_realpath__file_basename}" = X"."  ] || \
       [ X"${_realpath__file_basename}" = X".." ]; then
        _realpath__file_basename=""
    fi

    #extracts the directory component of the full path, if it's empty then
    #assume '.'
    _realpath__directory="${_realpath__path%${_realpath__file_basename}}"
    [ -z "${_realpath__directory}" ] && _realpath__directory="."

    #attempt to change to the directory
    if ! \cd "${_realpath__directory}" >/dev/null 2>/dev/null; then
        return 1
    fi

    #get the absolute path of the current directory & change back to previous
    #directory
    _realpath__abs_path="$(pwd -P)"
    \cd "-" >/dev/null 2>/dev/null

    #append base filename to absolute path
    if [ X"${_realpath__abs_path}" = X"/" ]; then
        _realpath__abs_path="${_realpath__abs_path}${_realpath__file_basename}"
    else
        _realpath__abs_path="${_realpath__abs_path}/${_realpath__file_basename}"
    fi

    printf "%s\\n" "${_realpath__abs_path}"
}

_usage() {
    printf "%s\\n" "Usage: ${PROGNAME} -r DOMAIN[:/PATH] [OPTIONS] [LOCAL DIR|FILE ...]"
    printf "%s\\n" "Backup directories to a remote system."
    printf "\\n"
    printf "%s\\n" "Required arguments:"
    printf "%s\\n" "  -r, --remote DOMAIN[:/PATH]   remote server"
    printf "\\n"
    printf "%s\\n" "Optional arguments:"
    printf "%s\\n" "  -s, --skip                    skip ssh auth pre-tests"
    printf "%s\\n" "  -o, --omit                    omit executing commands, useful with -v"
    printf "%s\\n" "  -n, --dry-run                 dry run, list files to be modified"
    printf "%s\\n" "  -u, --user USER               remote user    [${USER}]"
    printf "%s\\n" "  -p, --port PORT               remote port    [22]"
    printf "%s\\n" "  -i, --identity-file FILE      ssh public key [${HOME}/.ssh/id_rsa]"
    printf "%s\\n" "  -l, --log-file FILE           log file       [/tmp/${PROGNAME}.log ]"
    printf "%s\\n" "  -v, --verbose                 verbose"
    printf "%s\\n" "  -h, --help                    show this help message and exit"
    printf "\\n"
    printf "%s\\n" "  local DIR|FILE                files to backup [${HOME}]"
}

_die() {
    [ -z "${1}" ] || printf "%s\\n" "${*}" >&2
    _usage >&2; exit 1
}

_logger() {
    if [ -n "${logfile}" ]; then
        printf "%s\\n" "${*}" | tee -a "${logfile}"
    else
        printf "%s\\n" "${*}"
    fi
}

_verbose() {
    [ -z "${1}" ] && return 1
    [ -n "${verbose_flag}" ] && _logger "[V]: ${*}"
}

_printtime() {
    #format seconds to a pretty string
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${1}" | grep -v "[^0-9]" >/dev/null || return 1;

    _printtime__num="${1}"
    _printtime__min="0"
    _printtime__hour="0"
    _printtime__day="0"
    if [ "${_printtime__num}" -gt "59" ]; then
        _printtime__sec="$((${_printtime__num} % 60))"
        _printtime__num="$((${_printtime__num} / 60))"
        if [ "${_printtime__num}" -gt "59" ]; then
            _printtime__min="$((${_printtime__num} % 60))"
            _printtime__num="$((${_printtime__num} / 60))"
            if [ "${_printtime__num}" -gt "23" ]; then
                _printtime__hour="$((${_printtime__num} % 24))"
                _printtime__day="$((${_printtime__num} / 24))"
            else
                _printtime__hour="${_printtime__num}"
            fi
        else
            _printtime__min="${_printtime__num}"
        fi
    else
        _printtime__sec="${_printtime__num}"
    fi
    printf "%s\\n" "${_printtime__day}d ${_printtime__hour}h ${_printtime__min}m ${_printtime__sec}s"
}

_internetavailable() {
    ping -q -w 1 -c 1 google.com >/dev/null 2>&1 && return 0 || return 1
}

_backup() {
    [ -z "${1}" ] && return 1 || _backup__files="${1}"
    [ -z "${2}" ] && return 1 || _backup__remote_user="${2}"
    [ -z "${3}" ] && return 1 || _backup__remote_server="${3}"
    [ -z "${4}" ] && return 1 || _backup__remote_port="${4}"
    [ -z "${5}" ] && return 1 || _backup__sshkey="${5}"
    [ -z "${6}" ] && return 1 || _backup__logfile="${6}"
    [ -n "${dryrun_flag}" ]   && _backup__dry_run="--dry-run"
    _backup_start_time="$(date +%s)"

    if rsync -h | grep -- --detect-renamed >/dev/null; then
        _backup__extra_flags="--detect-renamed"
    fi

    _backup__ssh_mkdir="$(printf "%s %s" "ssh -p ${_backup__remote_port} -i ${_backup__sshkey}" \
        "${_backup__remote_user}@$(printf "%s" "${_backup__remote_server}" | \
        cut -d':' -f1) \"mkdir backup 2>/dev/null; mkdir backup/$(hostname -f) 2>/dev/null\"")"
    _verbose "exec         : ${_backup__ssh_mkdir}"
    [ -z "${ommit_flag}" ] && eval "${_backup__ssh_mkdir}" | tee -a "${_backup__logfile}"

    OLDIFS="${IFS}"
    IFS="|"

    for file in ${_backup__files}; do
        _verbose " "
        _backup__realpath="$(_realpath "${file}")"
        _backup__remotepath="$(printf "%s" "${_backup__realpath}" |           \
            awk '{sub(/\//,"root-"); gsub(/\//,"-"); print $0}')"
        case "${_backup__remotepath}" in
            #remove last hypen
            *-) _backup__remotepath="${_backup__remotepath%?}" ;;
        esac

        _verbose "realpath     : ${_backup__realpath}"
        _verbose "remotepath   : ${_backup__remotepath}"

        if [ -d "${_backup__realpath}" ]; then
            _backup__rsync="$(printf "%s %s %s %s %s" "rsync ${_backup__dry_run} -avz"  \
                "-e \"ssh -p ${_backup__remote_port} -i ${_backup__sshkey}\" --partial" \
                "--one-file-system --delete --exclude=.gvfs ${_backup__realpath}/"      \
                "${_backup__extra_flags}" \
                "${_backup__remote_user}@${_backup__remote_server}/${_backup__remotepath}")"
        elif [ -f "${_backup__realpath}" ]; then
            _backup__rsync="$(printf "%s %s %s %s %s" "rsync ${_backup__dry_run} -avz"   \
               "-e \"ssh -p ${_backup__remote_port} -i ${_backup__sshkey}\" --partial"   \
               "--one-file-system --delete --partial ${_backup__extra_flags}"            \
               "${_backup__realpath}" \
               "${_backup__remote_user}@${_backup__remote_server}/${_backup__remotepath}")"
        fi
        _verbose "exec         : ${_backup__rsync}"
        [ -z "${ommit_flag}" ] && eval "${_backup__rsync}" | tee -a "${_backup__logfile}"
    done

    IFS="${OLDIFS}"

    _backup_end_time="$(date +%s)"
    _backup_total_time="$((${_backup_end_time} - ${_backup_start_time}))"

    _logger "$(printf "%*s\\n" "34" ''  | tr ' ' =)"
    _logger "$(date)"
    _logger "Total time: $(_printtime "${_backup_total_time}")"
    _logger "$(printf "%*s\\n" "34" ''  | tr ' ' =)"

    rsync -e "ssh -p ${_backup__remote_port} -i ${_backup__sshkey}" \
        "${_backup__logfile}" "${_backup__remote_user}@${_backup__remote_server}"
}

PROGNAME="$(_basename "${0}")"

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- "${@}" $(cat)
fi

[ "${#}" -eq "0" ] && _die

for arg in "${@}"; do #parse options
    case "${arg}" in
        -h|--help)       _usage && exit ;;
        -v|--verbose)    verbose_flag="true"; shift ;;
        -s|--skip-tests) skip_ssh_tests="true"; shift ;;
        -o|--omit)       ommit_flag="true";   shift ;;
        -n|--dry-run)    dryrun_flag="true";  shift ;;
        '-r'|'--remote')
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                    -*) _die "Option '${arg}' requires a parameter";;
                esac
                shift; remote_server="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -r*)       remote_server="${1#-r}";       shift ;;
        --remote*) remote_server="${1#--remote}"; shift ;;
        '-u'|'--user')
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                    -*) _die "Option '${arg}' requires a parameter";;
                esac
                shift; remote_user="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -u*)     remote_user="${1#-u}";     shift ;;
        --user*) remote_user="${1#--user}"; shift ;;
        '-p'|'--port')
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                    -*) _die "Option '${arg}' requires a parameter";;
                esac
                shift; remote_port="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -p*)     remote_port="${1#-p}";     shift ;;
        --port*) remote_port="${1#--port}"; shift ;;
        '-i'|'--identity-file')
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                    -*) _die "Option '${arg}' requires a parameter";;
                esac
                shift; sshkey="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -i*)              sshkey="${1#-i}";              shift ;;
        --identity-file*) sshkey="${1#--identity-file}"; shift ;;
        '-l'|'--log-file')
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                    -*) _die "Option '${arg}' requires a parameter";;
                esac
                shift; logfile="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -l*)         logfile="${1#-l}";         shift ;;
        --log-file*) logfile="${1#--log-file}"; shift ;;
        -*) _die "${PROGNAME}: unrecognized option '${arg}'" ;;
    esac
done

if ! command -v "rsync" >/dev/null; then
    printf "%s\\n" "install 'rsync' to run this program" >&2; exit 1
elif ! command -v "ssh" >/dev/null; then
    printf "%s\\n" "install 'ssh' to run this program" >&2; exit 1
fi

exec 9>/tmp/"${PROGNAME}".lock #verify that only one instance is running
[ X"${LOGNAME}" = X"root" ] && chmod 666 /tmp/"${PROGNAME}".lock
if ! flock -n 9; then #http://mywiki.wooledge.org/BashFAQ/045
    printf "%s\\n" "${PROGNAME}: another instance is running";
    exit 1
fi

[ -z "${logfile}" ]     && logfile="/tmp/${PROGNAME}.log"
[ -z "${remote_user}" ] && remote_user="${USER}"
[ -z "${remote_port}" ] && remote_port="22"

if [ -z "${remote_server}" ]; then
    _die "${PROGNAME}: no remote server specified"
else
    if [ -z "$(printf "%s" "${remote_server}" | awk -F":" '{print $2}')" ]; then
        remote_server="${remote_server}:/home/${remote_user}/backup/$(hostname -f)"
    fi
fi

if [ -z "${ommit_flag}" ]; then
    if ! _internetavailable; then
        printf "%s\\n" "${PROGNAME}: no internet access, exiting." >&2
        exit 1
    fi
fi

#header
_logger "$(printf "%*s\\n" "34" ''  | tr ' ' =)"
_logger "$(date)"
_logger "$(printf "%*s\\n" "34" ''  | tr ' ' =)"

if [ -z "${1}" ]; then
    files="${HOME}"
else
    for file; do
        [ ! -r "${file}" ] && { _logger "[W]: ${file} does not exist or is not readable, skipping"; continue; }
        files="${file}""|""${files}"
    done
fi

if [ -z "${sshkey}" ]; then
    OLDIFS="${IFS}"
    IFS="|"

    #if no header is given, look for it in every directory given
    for file in ${files}; do
        if [ -f "${file}"/.ssh/id_rsa ]; then
            sshkey="${file}"/.ssh/id_rsa; break
        fi
    done

    #or in the default ssh directory
    if [ -z "${sshkey}" ]; then
       [ -f "${HOME}"/.ssh/id_rsa ] && sshkey="${HOME}"/.ssh/id_rsa
    fi

    IFS="${OLDIFS}"
fi

if [ -z "${skip_ssh_tests}" ]; then
    if [ -z "${sshkey}" ]; then
        _logger "[E]: no ssh key found!, you may try options -i or -s"
        printf "\\n" >&2; _usage >&2; exit 1
    fi

    remote_ip="$(printf "%s" "${remote_server}"|cut -d':' -f1)"
    ssh_auth_test="$(printf "%s %s %s %s" "ssh -o PasswordAuthentication=no" \
       "-o ChallengeResponseAuthentication=no  -o GSSAPIAuthentication=no"   \
       "-o KbdInteractiveAuthentication=no -p ${remote_port} -i ${sshkey}"   \
       "${remote_user}@${remote_ip} ls")"

    _verbose "exec         : ${ssh_auth_test}"
    if [ -z "${ommit_flag}" ]; then
        if ! eval "${ssh_auth_test}" >/dev/null 2>&1; then
            _logger "[E]: couldn't connect to remote server, wrong username/ssh key."
            printf "\\n" >&2; _usage >&2; exit 1
        fi
    fi
fi

_verbose "files        : ${files}"
_verbose "remote user  : ${remote_user}"
_verbose "remote server: ${remote_server}"
_verbose "remote port  : ${remote_port}"
_verbose "ssh key      : ${sshkey}"
_verbose "log          : ${logfile}"

[ X"${LOGNAME}" = X"root" ] && chmod 666 "${logfile}"

_backup "${files}" "${remote_user}" "${remote_server}" "${remote_port}" "${sshkey}" "${logfile}"
